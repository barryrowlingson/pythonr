<!--begin.rcode init,echo=FALSE,result="hide"
# build("./pythonr/index.Rhtml", "./templatr/inst/templates/pres1/","index.html",title="Python vs R")
knitr::opts_chunk$set(comment=NA, prompt=TRUE, dev="CairoPNG", cache=TRUE)
knitr::opts_knit$set(root.dir=wd)
op = options()$continue
options(continue=" ")
grDevices::X11.options(type='cairo')
library(readr)
library(lubridate)
library(stringr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggvis)
library(rvest)
library(testthat)
library(devtools)
library(testthat)
library(magrittr)
set.seed(310366)
end.rcode-->

<style>
span.language { font-weight: bold}
</style>

<div class="slide" id="title">
<h1>R vs Python</h1>
<h2>Barry Rowlingson</h2>
<h2><code>@geospacedman</code></h2>
<h3>Lancaster University</h3>
<p style="font-size: 40%">[next slide=right arrow, prev slide=left arrow, or click slide counter top-right for index]</p>
</div>

<div class="slide" id="first">
<h1>Fight!</h1>
<div class="left">
<img class="fit" src="images/Rlogo.png" />
</div>
<div class="right">
<img class="fit" src="images/pythonlogo.png" />
</div>
<h1>To the death!</h1>
</div>

<div class="slide">
<h1>Begin Warriors!</h1>
<img class="mainpic" src="images/fight1.jpg" />
</div>

<div class="slide">
<h1>Begin Warriors!</h1>
<img class="mainpic"  src="images/fight2.jpg" />
</div>

<div class="slide">
<h1>R</h1>
<p>
<ul>
<li>Evolved from "New S" (1988)</li>
<li>"New S" Evolved from "Old S" (1976)</li>
<li>Inspiration from LISP (1958)</li>
</ul>
</p>
</div>

<div class="slide">
<h1>A little LISP</h1>
<pre class="list">
> (+ 1 2)
3

> (+ 6 (* 3 (- 8 12)))
-6
</pre>
<p>R can be written a bit like this too!</p>
<pre class="list">
> `+`(1,2)
[1] 3
> `+`(6, `*`(3, `-`( 8, 12)))
[1] -6
</pre>
<p>but not recommended, because R has "infix" notation:</p>
<pre class="list">
> (6 +  (3 * (8 - 12)))
[1] -6
</pre>
<p>but sometimes infix isn't clear:</p>
<pre class="list">
> 6 + 3 * 8 - 12
[1] 18
</pre>
</div>

<div class="slide">
<h1>So we all know R, right?</h1>
<!-- begin.rcode
x = 1:10
y = 2 * x + rnorm(10, 0, 3)
y
m = lm(y~x)
m
end.rcode -->
</div>

<div class="slide">
<h1>Why Do People Fall In Love With R?</h1>
<h1 class="sub">Not an exhaustive list</h1>
<h2>Interactivity</h2>
<ul>
<li>Its a REPL (Read-evaluate-print loop)</li>
<li>Infix notation</li>
<li>Functional notation</li>
</ul>


<h2>Vectorisation</h2>
<!-- begin.rcode
y + c(10,100)
sqrt(y)
end.rcode -->


<h2>Graphics</h2>
<!-- begin.rcode
plot(x,y)
abline(m)
end.rcode -->

<h2>Data Structures</h2>
<ul>
<li>Vectors</li>
<li>Matrices</li>
<li>Data Frames</li>
</ul>

<h2>CRAN</h2>
<ul>
<li>Now over 7000 packages</li>
<li>Easy Installation</li>
<li>Quality Control (to an extent)</li>
</ul>

</div>

<div class="slide">
<h1>Why Do Beginners Struggle With R?</h1>
<h1 class="sub">Not an exhaustive list</h1>

<h2>Inconsistencies</h2>
<!--begin.rcode
args(read.table)
end.rcode-->

<h2>Quirks</h2>
<!--begin.rcode
z=matrix(1:9,3,3)
z[,1]
z[,1,drop=FALSE]
end.rcode-->

<!--begin.rcode
ages  = c(16,17,18,19)
sample(ages)
sample(ages[1:3])
sample(ages[1:2])
sample(ages[1:1])
end.rcode-->

<p>Definitive reference in 153 pages is:</p>
<div class="cpic">
<img class="mainpic" src="images/rinferno.png" />
</div>
<p>Free PDF from <code>http://www.burns-stat.com/documents/books/the-r-inferno/</code></p>

<h2>Mailing Lists</h2>
<p style="font-size: 500%; font-weight: bold; color: red">
Have you read the posting guide?!!? &$%^&!%"!!
</p>

<h2>Lack of Speed</h2>
<p>
Why is my code so slooooowwww!!!!
</p>


</div>

<div class="slide">
<h1>Python</h1>
<h2>Interative</h2>
<p>Its another REPL</p>
<script type="syntaxhighlighter" class="brush: python"><![CDATA[
>>> 1 + 2 * 3
7
>>> a = 1 + 2 * 3
>>> a
7
]]></script>
<h2>Modular</h2>
<p>Functionality is more structured into modules:</p>
<script type="syntaxhighlighter" class="brush: python"><![CDATA[
>>> sqrt(2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'sqrt' is not defined
>>> import math
>>> math.sqrt(2)
1.4142135623730951
>>> from math import sqrt
>>> sqrt(2)
1.4142135623730951
]]></script>

<h2>Vectors</h2>
<p>There are "vectors" (called lists), but no implicit vectorisation:</p>
<script type="syntaxhighlighter" class="brush: python"><![CDATA[
>>> x = [ 1, 2, 4, 8, 16 ]
>>> x
[1, 2, 4, 8, 16]
>>> math.sqrt(x)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: a float is required
]]></script>

<p>But there are syntactic helpers that are "pythonic" - this is a "list comprehension":</p>
<script type="syntaxhighlighter" class="brush: python"><![CDATA[
>>> [math.sqrt(z) for z in x]
[1.0, 1.4142135623730951, 2.0, 2.8284271247461903, 4.0]
]]></script>
<p>These can be quite complex:</p>
<script type="syntaxhighlighter" class="brush: python"><![CDATA[
>>> [math.sqrt(z) for z in x if z > 3]
[2.0, 2.8284271247461903, 4.0]
]]></script>

<h2>Functions</h2>
<p>Just like R, you can define functions and call them:</p>
<script type="syntaxhighlighter" class="brush: python"><![CDATA[
>>> def foo(x):
...   return math.sqrt(x) * math.log(x)
... 
>>> foo(9)
6.591673732008658
]]></script>

<h2>And all the other stuff...</h2>
<ul>
<li>Loops</li>
<li>If-then-else</li>
<li>Classes and Objects</li>
</ul>

</div>

<div class="slide">
<h1>Why Do People Fall In Love With Python?</h1>
<img class="mainpic" src="images/pythonflying.png" />

<h2>Clean Syntax</h2>
<p>Put this in a file called <code>sequence.py</code>:</p>
<script type="syntaxhighlighter" class="brush: python"><![CDATA[
def fib(n):
  a, b = 0, 1
  while a < n:
    print a,
    a, b = b, a+b
  print
]]></script>

<h2>Simple Modularity</h2>

<p>Given <code>sequence.py</code> simply do:</p>
<script type="syntaxhighlighter" class="brush: python"><![CDATA[
>>> from sequence import fib
>>> fib(1000)
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
]]></script>

<h2>Easy Documentation</h2>
<script type="syntaxhighlighter" class="brush: python"><![CDATA[
def fib(n):
  """
  Compute the fibonacci series up to n
  """
  a, b = 0, 1
  while a < n:
    print a,
    a, b = b, a+b
  print
]]></script>

<p>Then the help is there:</p>

<script type="syntaxhighlighter" class="brush: python"><![CDATA[
>>> help(fib)
Help on function fib in module sequence:

fib(n)
    Compute the fibonacci series up to n
]]></script>

<h2>The Python Package Index</h2>
<ul>
<li>Over 60,000 Packages</li>
<li>Install with <code>pip install whatever</code></li>
</ul>
</div>

<div class="slide">
<h1>Why Do Beginners Struggle With Python?</h1>
<h2>Significant Whitespace</h2>
<p>Some people shirk at spaces being important!</p>
<script type="syntaxhighlighter" class="brush: python"><![CDATA[
def fun(x):
   if x > 10:
      print "more than 10 values"
      for i in x:
         print x
   else:
      print "small"
   print "done"
fun(99)
]]></script>

<h2>Installation</h2>
<ul>
<li>Initial Installation</li>
<li>Package Installation</li>
</ul>

<h2>Discovery</h2>
<h3>Or "How Did You Know You Could Do That?"</h3>
<ul>
<li>Subliminality</li>
</ul>
</div>

<div class="slide">
<h1>Subliminality</h1>
<h2>Python is great because...</h2>
<ul>
<li>GvR</li>
<li>PEP8</li>
<li>Code: write once, read many times</li>
<li>Readability Counts</li>
<li>Foundation</li>
<li>Community</li>
</ul>
</div>

<div class="slide">
<h1>Overcoming The Problems</h1>
<h2>Warning: controversy (and generalisations) ahead!</h2>
<ul>
<li>You have to live with R's annoyances. At least until R gets a ground-up compatibility breaking rewrite. Getting through them makes you a less annoyed programmer.</li>
<li>Python's annoyances are learning opportunities. Getting through them makes you a better programmer.</li>
</ul>
</div>

<div class="slide">
<h2>Leveraging Synergies</h2>
<ul>
<li>R package <code>rPython</code></li>
<li>Python package <code>rpy2</code></li>
</ul>
</div>

<div class="slide">
<h2>Horses For Courses</h2>
<p>I use <span class="language">R</span> for</p>
<ul>
<li>Statistical Analysis</li>
<li>Some Data Mashing</li>
<li>Graphics</li>
</ul>
<p>I use <span class="language">Python</span> for</p>
<ul>
<li>QGIS Programming</li>
<li>GUI Applications</li>
<li>Some Data Mashing</li>
<li>Web Server Programming</li>
</ul>
<p>I use <span class="language">JavaScript</span> for</p>
<ul>
<li>Web Client Programming</li>
</ul>
<p>I use <span class="language">C/C++</span> for</p>
<ul>
<li>Speed</li>
</ul>
<p>I don't use <span class="language">Perl</span> any more</p>
<p>I use <span class="language">Fortran</span> for</p>
<ul>
<li>Nostalgic Late Night Coding Reminding Me Of My Undergraduate Days...*sigh*</li>
</ul>
</div>

<!--begin.rcode endit,echo=FALSE,result="hide", cache=FALSE
#save(list=c("bps","bpd","bpd2","bps2"),file="/tmp/run.RData")
options(continue=op)
end.rcode-->
